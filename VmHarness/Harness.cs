// <auto-generated />

using Neo.Json;

namespace Neo.VM.Harness;

enum ExitCode : int
{
    VmHaltedCode = 0,
    WrongArgCode = 1,
    WrongStrCode = 2,
    RunErrorCode = 3,
    VmFailedCode = 4,
}

class HarnessExecutionEngine : ExecutionEngine
{
    protected override void OnFault(Exception ex)
    {
        State = VMState.FAULT;
        Console.Error.WriteLine("error when running script: " + ex.Message);
        Environment.Exit((int)ExitCode.RunErrorCode);
    }
}

class Harness
{
    public static void Run(string[] args)
    {
        if (args.Length != 1)
        {
            Console.Error.WriteLine("expected string (base64) as argument");
            Environment.Exit((int)ExitCode.WrongArgCode);
        }
        byte[] script = default!;
        try
        {
            script = Convert.FromBase64String(args.First());
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine("error when decoding string (base64): " + ex.Message);
            Environment.Exit((int)ExitCode.WrongStrCode);
        }
        using HarnessExecutionEngine engine = new();
        engine.LoadScript(script);
        engine.Execute();
        switch (engine.State)
        {
            case VMState.FAULT:
                {
                    Console.WriteLine("result: VM failed");
                    Environment.Exit((int)ExitCode.VmFailedCode);
                    break;
                }
            case VMState.HALT:
                {
                    Console.WriteLine("result: VM halted");
                    Console.WriteLine(new JArray(engine.ResultStack.Select(p => p.ToJson())).ToString());
                    Environment.Exit((int)ExitCode.VmHaltedCode);
                    break;
                }
        }
    }
}
