// <auto-generated />

using Neo.Json;

namespace Neo.VM.Harness;

readonly record struct Result(string status, string errmsg, string estack);

class HarnessExecutionEngine : ExecutionEngine
{
    public Exception ex;
    protected override void OnFault(Exception ex)
    {
        this.ex = ex;
        base.OnFault(ex);
    }
}

class Harness
{
    public static Result Run(string[] args)
    {
        if (args.Length != 1)
        {
            return new Result(status: "argument error", errmsg: "invalid number of arguments", estack: "[]");
        }
        byte[] script = default!;
        try
        {
            script = Convert.FromBase64String(args.First());
        }
        catch (Exception ex)
        {
            return new Result(status: "decoding error", errmsg: "invalid base64 string: " + ex.Message, estack: "[]");
        }
        using HarnessExecutionEngine engine = new();
        engine.LoadScript(script);
        engine.Execute();
        switch (engine.State)
        {
            case VMState.FAULT:
                return new Result(status: "VM error", errmsg: engine.ex.Message, estack: "[]");
            case VMState.HALT:
                return new Result(status: "VM halted", errmsg: "", estack: new JArray(engine.ResultStack.Select(p => p.ToJson())).ToString());
        }
        throw new Exception("unknown state");
    }
}
